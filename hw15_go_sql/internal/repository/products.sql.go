// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateProduct = `-- name: CreateProduct :one
insert into general.products ("name", price)
values($1, $2)
returning id
`

type CreateProductParams struct {
	Name  string `db:"name" json:"name"`
	Price int32  `db:"price" json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, CreateProduct, arg.Name, arg.Price)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const DeleteProduct = `-- name: DeleteProduct :exec
delete from general.products where id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeleteProduct, id)
	return err
}

const GetProductById = `-- name: GetProductById :one
select id, name, price from general.products where id = $1
`

func (q *Queries) GetProductById(ctx context.Context, id pgtype.UUID) (*GeneralProduct, error) {
	row := q.db.QueryRow(ctx, GetProductById, id)
	var i GeneralProduct
	err := row.Scan(&i.ID, &i.Name, &i.Price)
	return &i, err
}

const GetProducts = `-- name: GetProducts :many
select id, name, price from general.products
`

func (q *Queries) GetProducts(ctx context.Context) ([]*GeneralProduct, error) {
	rows, err := q.db.Query(ctx, GetProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GeneralProduct{}
	for rows.Next() {
		var i GeneralProduct
		if err := rows.Scan(&i.ID, &i.Name, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateProductPrice = `-- name: UpdateProductPrice :exec
update general.products set price = $2 where id = $1
`

type UpdateProductPriceParams struct {
	ID    pgtype.UUID `db:"id" json:"id"`
	Price int32       `db:"price" json:"price"`
}

func (q *Queries) UpdateProductPrice(ctx context.Context, arg UpdateProductPriceParams) error {
	_, err := q.db.Exec(ctx, UpdateProductPrice, arg.ID, arg.Price)
	return err
}
