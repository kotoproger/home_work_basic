// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateUser = `-- name: CreateUser :one
insert into general.users ("name", email, password_hash, password_salt)
values($1, $2, $3, $4)
returning id
`

type CreateUserParams struct {
	Name         *string `db:"name" json:"name"`
	Email        string  `db:"email" json:"email"`
	PasswordHash string  `db:"password_hash" json:"password_hash"`
	PasswordSalt string  `db:"password_salt" json:"password_salt"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, CreateUser,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.PasswordSalt,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const DeleteUser = `-- name: DeleteUser :exec
delete from general.users where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeleteUser, id)
	return err
}

const FindUser = `-- name: FindUser :one
select id, name, email, password_hash, password_salt from general.users where email =$1
`

func (q *Queries) FindUser(ctx context.Context, email string) (*GeneralUser, error) {
	row := q.db.QueryRow(ctx, FindUser, email)
	var i GeneralUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.PasswordSalt,
	)
	return &i, err
}

const UpdateUserName = `-- name: UpdateUserName :exec
update general.users set name = $2 where id = $1
`

type UpdateUserNameParams struct {
	ID   pgtype.UUID `db:"id" json:"id"`
	Name *string     `db:"name" json:"name"`
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) error {
	_, err := q.db.Exec(ctx, UpdateUserName, arg.ID, arg.Name)
	return err
}
