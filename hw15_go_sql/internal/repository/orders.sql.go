// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateOrder = `-- name: CreateOrder :one
insert into general.orders (user_id, order_date, total_amount)
values ($1, now(), 0)
returning id
`

func (q *Queries) CreateOrder(ctx context.Context, userID pgtype.UUID) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, CreateOrder, userID)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const GetOrderById = `-- name: GetOrderById :one
select id, user_id, order_date, total_amount from general.orders where id = $1
`

func (q *Queries) GetOrderById(ctx context.Context, id pgtype.UUID) (*GeneralOrder, error) {
	row := q.db.QueryRow(ctx, GetOrderById, id)
	var i GeneralOrder
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderDate,
		&i.TotalAmount,
	)
	return &i, err
}

const GetOrdersByUser = `-- name: GetOrdersByUser :many
select id, user_id, order_date, total_amount from general.orders where user_id = $1
`

func (q *Queries) GetOrdersByUser(ctx context.Context, userID pgtype.UUID) ([]*GeneralOrder, error) {
	rows, err := q.db.Query(ctx, GetOrdersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GeneralOrder{}
	for rows.Next() {
		var i GeneralOrder
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderDate,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateOrderAmount = `-- name: UpdateOrderAmount :one
update general.orders set total_amount = $2
where id = $1
returning total_amount
`

type UpdateOrderAmountParams struct {
	ID          pgtype.UUID `db:"id" json:"id"`
	TotalAmount int32       `db:"total_amount" json:"total_amount"`
}

func (q *Queries) UpdateOrderAmount(ctx context.Context, arg UpdateOrderAmountParams) (int32, error) {
	row := q.db.QueryRow(ctx, UpdateOrderAmount, arg.ID, arg.TotalAmount)
	var total_amount int32
	err := row.Scan(&total_amount)
	return total_amount, err
}
